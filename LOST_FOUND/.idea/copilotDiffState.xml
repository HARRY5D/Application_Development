<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.CAMPUS_LOST_FOUND&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ReportItemActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- Required permissions for Firebase and networking --&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;.CampusLostFoundApplication&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.CAMPUS_LOST_FOUND&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.LoginActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ReportItemActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:parentActivityName=&quot;.MainActivity&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.AdminDashboardActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:parentActivityName=&quot;.MainActivity&quot;&#13;&#10;            android:label=&quot;Admin Dashboard&quot; /&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/LoginActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/LoginActivity.kt" />
              <option name="originalContent" value="package com.example.campus_lost_found&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.SignInButton&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.android.material.textfield.TextInputLayout&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException&#10;import com.google.firebase.auth.FirebaseAuthInvalidUserException&#10;import com.google.firebase.auth.GoogleAuthProvider&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;&#10;    private lateinit var auth: FirebaseAuth&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#10;    private val TAG = &quot;LoginActivity&quot;&#10;&#10;    // UI elements&#10;    private lateinit var emailLayout: TextInputLayout&#10;    private lateinit var passwordLayout: TextInputLayout&#10;    private lateinit var emailInput: EditText&#10;    private lateinit var passwordInput: EditText&#10;    private lateinit var loginButton: Button&#10;    private lateinit var signupButton: Button&#10;    private lateinit var forgotPasswordText: TextView&#10;    private lateinit var useDefaultEmailText: TextView&#10;    private lateinit var progressBar: ProgressBar&#10;    private lateinit var googleSignInButton: SignInButton&#10;    private lateinit var skipButton: Button&#10;&#10;    // Default credentials&#10;    private val defaultEmail = &quot;sgp.noreplydce@gmail.com&quot;&#10;    private val defaultPassword = &quot;campus123&quot;&#10;&#10;    // Modern Activity Result API for Google Sign-In&#10;    private val googleSignInLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == RESULT_OK) {&#10;            handleSignInResult(result.data)&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        try {&#10;            // Force apply the dark theme&#10;            setTheme(R.style.Theme_CAMPUS_LOST_FOUND)&#10;            setContentView(R.layout.activity_login)&#10;&#10;            }&#10;&#10;            // Initialize views safely&#10;            initializeViewsSafely()&#10;&#10;            // Set up listeners&#10;            setupListeners()&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Critical error during initialization: ${e.message}&quot;)&#10;            // If anything fails, just go to main activity&#10;            startMainActivity()&#10;        }&#10;    }&#10;&#10;    private fun initializeViewsSafely() {&#10;        try {&#10;            emailLayout = findViewById(R.id.emailLayout)&#10;            passwordLayout = findViewById(R.id.passwordLayout)&#10;            emailInput = findViewById(R.id.emailInput)&#10;            passwordInput = findViewById(R.id.passwordInput)&#10;            loginButton = findViewById(R.id.loginButton)&#10;            signupButton = findViewById(R.id.signupButton)&#10;            forgotPasswordText = findViewById(R.id.forgotPasswordText)&#10;            useDefaultEmailText = findViewById(R.id.useDefaultEmailText)&#10;            progressBar = findViewById(R.id.progressBar)&#10;            skipButton = findViewById(R.id.skipButton)&#10;&#10;            // Initialize Google Sign-In safely&#10;            try {&#10;                googleSignInButton = findViewById(R.id.googleSignInButton)&#10;                val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                    .requestIdToken(&quot;810761260274-qpi92nq7i379d91ob1r2v35f7rpljc42.apps.googleusercontent.com&quot;)&#10;                    .requestEmail()&#10;                    .build()&#10;                googleSignInClient = GoogleSignIn.getClient(this, gso)&#10;            } catch (e: Exception) {&#10;                Log.e(TAG, &quot;Google Sign-In initialization failed: ${e.message}&quot;)&#10;                // Hide Google Sign-In button if it fails&#10;                findViewById&lt;View&gt;(R.id.googleSignInButton)?.visibility = View.GONE&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;View initialization failed: ${e.message}&quot;)&#10;            throw e&#10;        }&#10;    }&#10;&#10;    private fun setupListeners() {&#10;        // Skip authentication button&#10;        skipButton.setOnClickListener {&#10;            // Skip authentication and continue to main activity&#10;            Toast.makeText(this,&#10;                &quot;Proceeding without authentication&quot;,&#10;                Toast.LENGTH_SHORT).show()&#10;            startMainActivity()&#10;        }&#10;&#10;        // Google Sign-In button&#10;        googleSignInButton.setOnClickListener {&#10;            signInWithGoogle()&#10;        }&#10;&#10;        // Default email login&#10;        useDefaultEmailText.setOnClickListener {&#10;            // First try to sign in with default credentials&#10;            signInWithEmailPassword(defaultEmail, defaultPassword)&#10;        }&#10;&#10;        // Regular login button&#10;        loginButton.setOnClickListener {&#10;            val email = emailInput.text.toString().trim()&#10;            val password = passwordInput.text.toString().trim()&#10;&#10;            if (validateInput(email, password)) {&#10;                signInWithEmailPassword(email, password)&#10;            }&#10;        }&#10;&#10;        // Sign up button&#10;        signupButton.setOnClickListener {&#10;            val email = emailInput.text.toString().trim()&#10;            val password = passwordInput.text.toString().trim()&#10;&#10;            if (validateInput(email, password)) {&#10;                createAccount(email, password)&#10;            }&#10;        }&#10;&#10;        // Forgot password text&#10;        forgotPasswordText.setOnClickListener {&#10;            showForgotPasswordDialog()&#10;        }&#10;    }&#10;&#10;    private fun validateInput(email: String, password: String): Boolean {&#10;        var isValid = true&#10;&#10;        if (email.isEmpty()) {&#10;            emailLayout.error = &quot;Email is required&quot;&#10;            isValid = false&#10;        } else {&#10;            emailLayout.error = null&#10;        }&#10;&#10;        if (password.isEmpty()) {&#10;            passwordLayout.error = &quot;Password is required&quot;&#10;            isValid = false&#10;        } else if (password.length &lt; 6) {&#10;            passwordLayout.error = &quot;Password must be at least 6 characters&quot;&#10;            isValid = false&#10;        } else {&#10;            passwordLayout.error = null&#10;        }&#10;&#10;        return isValid&#10;    }&#10;&#10;    private fun signInWithGoogle() {&#10;        try {&#10;            showProgress(true)&#10;            val signInIntent = googleSignInClient.signInIntent&#10;            googleSignInLauncher.launch(signInIntent)&#10;        } catch (e: Exception) {&#10;            showProgress(false)&#10;            Log.e(TAG, &quot;Error starting Google Sign-In: ${e.message}&quot;)&#10;            Toast.makeText(&#10;                this,&#10;                &quot;Google Sign-In is not available. Proceeding without authentication.&quot;,&#10;                Toast.LENGTH_LONG&#10;            ).show()&#10;            // Just proceed to main activity instead of showing dialog&#10;            startMainActivity()&#10;        }&#10;    }&#10;&#10;    private fun signInWithEmailPassword(email: String, password: String) {&#10;        showProgress(true)&#10;&#10;        auth.signInWithEmailAndPassword(email, password)&#10;            .addOnCompleteListener(this) { task -&gt;&#10;                showProgress(false)&#10;                if (task.isSuccessful) {&#10;                    Log.d(TAG, &quot;signInWithEmail:success&quot;)&#10;                    startMainActivity()&#10;                } else {&#10;                    Log.w(TAG, &quot;signInWithEmail:failure&quot;, task.exception)&#10;&#10;                    // Provide more specific error messages&#10;                    when (task.exception) {&#10;                        is FirebaseAuthInvalidUserException -&gt; {&#10;                            // If using the default email and it fails, create the account&#10;                            if (email == defaultEmail) {&#10;                                createAccount(defaultEmail, defaultPassword)&#10;                            } else {&#10;                                Toast.makeText(this, &quot;User does not exist. Please create an account first.&quot;,&#10;                                    Toast.LENGTH_SHORT).show()&#10;                            }&#10;                        }&#10;                        is FirebaseAuthInvalidCredentialsException -&gt; {&#10;                            Toast.makeText(this, &quot;Invalid password. Please try again.&quot;,&#10;                                Toast.LENGTH_SHORT).show()&#10;                        }&#10;                        else -&gt; {&#10;                            Toast.makeText(this, &quot;Authentication failed: ${task.exception?.message}&quot;,&#10;                                Toast.LENGTH_SHORT).show()&#10;&#10;                            // Show dialog offering alternatives&#10;                            showAuthenticationFailedDialog()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;    }&#10;&#10;    private fun createAccount(email: String, password: String) {&#10;        showProgress(true)&#10;&#10;        auth.createUserWithEmailAndPassword(email, password)&#10;            .addOnCompleteListener(this) { task -&gt;&#10;                showProgress(false)&#10;                if (task.isSuccessful) {&#10;                    Log.d(TAG, &quot;createUserWithEmail:success&quot;)&#10;                    Toast.makeText(this, &quot;Account created successfully!&quot;, Toast.LENGTH_SHORT).show()&#10;                    startMainActivity()&#10;                } else {&#10;                    Log.w(TAG, &quot;createUserWithEmail:failure&quot;, task.exception)&#10;                    Toast.makeText(this, &quot;Registration failed: ${task.exception?.message}&quot;,&#10;                        Toast.LENGTH_SHORT).show()&#10;&#10;                    // If everything fails, offer to proceed without authentication&#10;                    showAuthenticationFailedDialog()&#10;                }&#10;            }&#10;    }&#10;&#10;    private fun showForgotPasswordDialog() {&#10;        val emailInput = EditText(this)&#10;        emailInput.hint = &quot;Enter your email&quot;&#10;&#10;        MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Reset Password&quot;)&#10;            .setMessage(&quot;Enter your email to receive a password reset link&quot;)&#10;            .setView(emailInput)&#10;            .setPositiveButton(&quot;Send&quot;) { _, _ -&gt;&#10;                val email = emailInput.text.toString().trim()&#10;                if (email.isNotEmpty()) {&#10;                    resetPassword(email)&#10;                } else {&#10;                    Toast.makeText(this, &quot;Email cannot be empty&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun resetPassword(email: String) {&#10;        showProgress(true)&#10;&#10;        auth.sendPasswordResetEmail(email)&#10;            .addOnCompleteListener { task -&gt;&#10;                showProgress(false)&#10;                if (task.isSuccessful) {&#10;                    Toast.makeText(this, &quot;Reset link sent to your email&quot;, Toast.LENGTH_SHORT).show()&#10;                } else {&#10;                    Toast.makeText(this, &quot;Failed to send reset email: ${task.exception?.message}&quot;,&#10;                        Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;    }&#10;&#10;    private fun showAuthenticationFailedDialog() {&#10;        MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Authentication Failed&quot;)&#10;            .setMessage(&quot;Would you like to continue without signing in? Some features may be limited.&quot;)&#10;            .setPositiveButton(&quot;Continue Without Sign In&quot;) { _, _ -&gt;&#10;                startMainActivity()&#10;            }&#10;            .setNegativeButton(&quot;Try Again&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showGoogleSignInNotAvailableDialog() {&#10;        MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Google Sign-In Not Available&quot;)&#10;            .setMessage(&quot;Please use email/password authentication or proceed without authentication.&quot;)&#10;            .setPositiveButton(&quot;Skip Authentication&quot;) { _, _ -&gt;&#10;                startMainActivity()&#10;            }&#10;            .setNegativeButton(&quot;Try Email/Password&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun handleSignInResult(data: Intent?) {&#10;        try {&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(data)&#10;            val account = task.getResult(ApiException::class.java)&#10;            if (account != null &amp;&amp; account.idToken != null) {&#10;                firebaseAuthWithGoogle(account.idToken!!)&#10;            } else {&#10;                throw Exception(&quot;Google account or token is null&quot;)&#10;            }&#10;        } catch (e: ApiException) {&#10;            showProgress(false)&#10;            Log.w(TAG, &quot;Google sign in failed: ${e.statusCode}&quot;, e)&#10;            Toast.makeText(this, &quot;Google Sign-In failed. Proceeding without authentication.&quot;,&#10;                Toast.LENGTH_SHORT).show()&#10;            startMainActivity()&#10;        } catch (e: Exception) {&#10;            showProgress(false)&#10;            Log.e(TAG, &quot;Unexpected error in Google Sign-In: ${e.message}&quot;)&#10;            startMainActivity()&#10;        }&#10;    }&#10;&#10;    private fun firebaseAuthWithGoogle(idToken: String) {&#10;        val credential = GoogleAuthProvider.getCredential(idToken, null)&#10;        auth.signInWithCredential(credential)&#10;            .addOnCompleteListener(this) { task -&gt;&#10;                showProgress(false)&#10;                if (task.isSuccessful) {&#10;                    Log.d(TAG, &quot;signInWithCredential:success&quot;)&#10;                    startMainActivity()&#10;                } else {&#10;                    Log.w(TAG, &quot;signInWithCredential:failure&quot;, task.exception)&#10;                    Toast.makeText(this, &quot;Google authentication failed: ${task.exception?.message}&quot;,&#10;                        Toast.LENGTH_SHORT).show()&#10;&#10;                    // If Google auth fails, show dialog offering alternatives&#10;                    showAuthenticationFailedDialog()&#10;                }&#10;            }&#10;    }&#10;&#10;    private fun showProgress(show: Boolean) {&#10;        progressBar.visibility = if (show) View.VISIBLE else View.GONE&#10;    }&#10;&#10;    private fun startMainActivity() {&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.campus_lost_found&#13;&#10;&#13;&#10;import android.content.Intent&#13;&#10;import android.os.Bundle&#13;&#10;import android.util.Log&#13;&#10;import android.view.View&#13;&#10;import android.widget.Button&#13;&#10;import android.widget.EditText&#13;&#10;import android.widget.ProgressBar&#13;&#10;import android.widget.TextView&#13;&#10;import android.widget.Toast&#13;&#10;import androidx.activity.result.contract.ActivityResultContracts&#13;&#10;import androidx.appcompat.app.AppCompatActivity&#13;&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#13;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient&#13;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#13;&#10;import com.google.android.gms.common.SignInButton&#13;&#10;import com.google.android.gms.common.api.ApiException&#13;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#13;&#10;import com.google.android.material.textfield.TextInputLayout&#13;&#10;import com.google.firebase.auth.FirebaseAuth&#13;&#10;import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException&#13;&#10;import com.google.firebase.auth.FirebaseAuthInvalidUserException&#13;&#10;import com.google.firebase.auth.GoogleAuthProvider&#13;&#10;&#13;&#10;class LoginActivity : AppCompatActivity() {&#13;&#10;&#13;&#10;    private lateinit var auth: FirebaseAuth&#13;&#10;    private lateinit var googleSignInClient: GoogleSignInClient&#13;&#10;    private val TAG = &quot;LoginActivity&quot;&#13;&#10;&#13;&#10;    // UI elements&#13;&#10;    private lateinit var emailLayout: TextInputLayout&#13;&#10;    private lateinit var passwordLayout: TextInputLayout&#13;&#10;    private lateinit var emailInput: EditText&#13;&#10;    private lateinit var passwordInput: EditText&#13;&#10;    private lateinit var loginButton: Button&#13;&#10;    private lateinit var signupButton: Button&#13;&#10;    private lateinit var forgotPasswordText: TextView&#13;&#10;    private lateinit var useDefaultEmailText: TextView&#13;&#10;    private lateinit var progressBar: ProgressBar&#13;&#10;    private lateinit var googleSignInButton: SignInButton&#13;&#10;    private lateinit var skipButton: Button&#13;&#10;&#13;&#10;    // Default credentials&#13;&#10;    private val defaultEmail = &quot;sgp.noreplydce@gmail.com&quot;&#13;&#10;    private val defaultPassword = &quot;campus123&quot;&#13;&#10;&#13;&#10;    // Modern Activity Result API for Google Sign-In&#13;&#10;    private val googleSignInLauncher = registerForActivityResult(&#13;&#10;        ActivityResultContracts.StartActivityForResult()&#13;&#10;    ) { result -&gt;&#13;&#10;        if (result.resultCode == RESULT_OK) {&#13;&#10;            handleSignInResult(result.data)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;&#13;&#10;        try {&#13;&#10;            // Force apply the dark theme&#13;&#10;            setTheme(R.style.Theme_CAMPUS_LOST_FOUND)&#13;&#10;            setContentView(R.layout.activity_login)&#13;&#10;&#13;&#10;            // Check if Firebase is properly initialized&#13;&#10;            if (!CampusLostFoundApplication.isFirebaseInitialized) {&#13;&#10;                Log.w(TAG, &quot;Firebase not initialized, proceeding without authentication&quot;)&#13;&#10;                showFirebaseUnavailableDialog()&#13;&#10;                return&#13;&#10;            }&#13;&#10;&#13;&#10;            // Initialize Firebase Auth first&#13;&#10;            auth = FirebaseAuth.getInstance()&#13;&#10;&#13;&#10;            // Check if user is already signed in&#13;&#10;            if (auth.currentUser != null) {&#13;&#10;                startMainActivity()&#13;&#10;                return&#13;&#10;            }&#13;&#10;&#13;&#10;            // Initialize views safely&#13;&#10;            initializeViewsSafely()&#13;&#10;&#13;&#10;            // Set up listeners&#13;&#10;            setupListeners()&#13;&#10;&#13;&#10;        } catch (e: Exception) {&#13;&#10;            Log.e(TAG, &quot;Critical error during initialization: ${e.message}&quot;)&#13;&#10;            // If anything fails, just go to main activity&#13;&#10;            startMainActivity()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun initializeViewsSafely() {&#13;&#10;        try {&#13;&#10;            emailLayout = findViewById(R.id.emailLayout)&#13;&#10;            passwordLayout = findViewById(R.id.passwordLayout)&#13;&#10;            emailInput = findViewById(R.id.emailInput)&#13;&#10;            passwordInput = findViewById(R.id.passwordInput)&#13;&#10;            loginButton = findViewById(R.id.loginButton)&#13;&#10;            signupButton = findViewById(R.id.signupButton)&#13;&#10;            forgotPasswordText = findViewById(R.id.forgotPasswordText)&#13;&#10;            useDefaultEmailText = findViewById(R.id.useDefaultEmailText)&#13;&#10;            progressBar = findViewById(R.id.progressBar)&#13;&#10;            skipButton = findViewById(R.id.skipButton)&#13;&#10;&#13;&#10;            // Initialize Google Sign-In safely&#13;&#10;            try {&#13;&#10;                googleSignInButton = findViewById(R.id.googleSignInButton)&#13;&#10;                val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#13;&#10;                    .requestIdToken(&quot;810761260274-qpi92nq7i379d91ob1r2v35f7rpljc42.apps.googleusercontent.com&quot;)&#13;&#10;                    .requestEmail()&#13;&#10;                    .build()&#13;&#10;                googleSignInClient = GoogleSignIn.getClient(this, gso)&#13;&#10;            } catch (e: Exception) {&#13;&#10;                Log.e(TAG, &quot;Google Sign-In initialization failed: ${e.message}&quot;)&#13;&#10;                // Hide Google Sign-In button if it fails&#13;&#10;                findViewById&lt;View&gt;(R.id.googleSignInButton)?.visibility = View.GONE&#13;&#10;            }&#13;&#10;        } catch (e: Exception) {&#13;&#10;            Log.e(TAG, &quot;View initialization failed: ${e.message}&quot;)&#13;&#10;            throw e&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun setupListeners() {&#13;&#10;        // Skip authentication button&#13;&#10;        skipButton.setOnClickListener {&#13;&#10;            // Skip authentication and continue to main activity&#13;&#10;            Toast.makeText(this,&#13;&#10;                &quot;Proceeding without authentication&quot;,&#13;&#10;                Toast.LENGTH_SHORT).show()&#13;&#10;            startMainActivity()&#13;&#10;        }&#13;&#10;&#13;&#10;        // Google Sign-In button&#13;&#10;        googleSignInButton.setOnClickListener {&#13;&#10;            signInWithGoogle()&#13;&#10;        }&#13;&#10;&#13;&#10;        // Default email login&#13;&#10;        useDefaultEmailText.setOnClickListener {&#13;&#10;            // First try to sign in with default credentials&#13;&#10;            signInWithEmailPassword(defaultEmail, defaultPassword)&#13;&#10;        }&#13;&#10;&#13;&#10;        // Regular login button&#13;&#10;        loginButton.setOnClickListener {&#13;&#10;            val email = emailInput.text.toString().trim()&#13;&#10;            val password = passwordInput.text.toString().trim()&#13;&#10;&#13;&#10;            if (validateInput(email, password)) {&#13;&#10;                signInWithEmailPassword(email, password)&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // Sign up button&#13;&#10;        signupButton.setOnClickListener {&#13;&#10;            val email = emailInput.text.toString().trim()&#13;&#10;            val password = passwordInput.text.toString().trim()&#13;&#10;&#13;&#10;            if (validateInput(email, password)) {&#13;&#10;                createAccount(email, password)&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // Forgot password text&#13;&#10;        forgotPasswordText.setOnClickListener {&#13;&#10;            showForgotPasswordDialog()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun validateInput(email: String, password: String): Boolean {&#13;&#10;        var isValid = true&#13;&#10;&#13;&#10;        if (email.isEmpty()) {&#13;&#10;            emailLayout.error = &quot;Email is required&quot;&#13;&#10;            isValid = false&#13;&#10;        } else {&#13;&#10;            emailLayout.error = null&#13;&#10;        }&#13;&#10;&#13;&#10;        if (password.isEmpty()) {&#13;&#10;            passwordLayout.error = &quot;Password is required&quot;&#13;&#10;            isValid = false&#13;&#10;        } else if (password.length &lt; 6) {&#13;&#10;            passwordLayout.error = &quot;Password must be at least 6 characters&quot;&#13;&#10;            isValid = false&#13;&#10;        } else {&#13;&#10;            passwordLayout.error = null&#13;&#10;        }&#13;&#10;&#13;&#10;        return isValid&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun signInWithGoogle() {&#13;&#10;        try {&#13;&#10;            showProgress(true)&#13;&#10;            val signInIntent = googleSignInClient.signInIntent&#13;&#10;            googleSignInLauncher.launch(signInIntent)&#13;&#10;        } catch (e: Exception) {&#13;&#10;            showProgress(false)&#13;&#10;            Log.e(TAG, &quot;Error starting Google Sign-In: ${e.message}&quot;)&#13;&#10;            Toast.makeText(&#13;&#10;                this,&#13;&#10;                &quot;Google Sign-In is not available. Proceeding without authentication.&quot;,&#13;&#10;                Toast.LENGTH_LONG&#13;&#10;            ).show()&#13;&#10;            // Just proceed to main activity instead of showing dialog&#13;&#10;            startMainActivity()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun signInWithEmailPassword(email: String, password: String) {&#13;&#10;        showProgress(true)&#13;&#10;&#13;&#10;        auth.signInWithEmailAndPassword(email, password)&#13;&#10;            .addOnCompleteListener(this) { task -&gt;&#13;&#10;                showProgress(false)&#13;&#10;                if (task.isSuccessful) {&#13;&#10;                    Log.d(TAG, &quot;signInWithEmail:success&quot;)&#13;&#10;                    startMainActivity()&#13;&#10;                } else {&#13;&#10;                    Log.w(TAG, &quot;signInWithEmail:failure&quot;, task.exception)&#13;&#10;&#13;&#10;                    // Provide more specific error messages&#13;&#10;                    when (task.exception) {&#13;&#10;                        is FirebaseAuthInvalidUserException -&gt; {&#13;&#10;                            // If using the default email and it fails, create the account&#13;&#10;                            if (email == defaultEmail) {&#13;&#10;                                createAccount(defaultEmail, defaultPassword)&#13;&#10;                            } else {&#13;&#10;                                Toast.makeText(this, &quot;User does not exist. Please create an account first.&quot;,&#13;&#10;                                    Toast.LENGTH_SHORT).show()&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                        is FirebaseAuthInvalidCredentialsException -&gt; {&#13;&#10;                            Toast.makeText(this, &quot;Invalid password. Please try again.&quot;,&#13;&#10;                                Toast.LENGTH_SHORT).show()&#13;&#10;                        }&#13;&#10;                        else -&gt; {&#13;&#10;                            Toast.makeText(this, &quot;Authentication failed: ${task.exception?.message}&quot;,&#13;&#10;                                Toast.LENGTH_SHORT).show()&#13;&#10;&#13;&#10;                            // Show dialog offering alternatives&#13;&#10;                            showAuthenticationFailedDialog()&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun createAccount(email: String, password: String) {&#13;&#10;        showProgress(true)&#13;&#10;&#13;&#10;        auth.createUserWithEmailAndPassword(email, password)&#13;&#10;            .addOnCompleteListener(this) { task -&gt;&#13;&#10;                showProgress(false)&#13;&#10;                if (task.isSuccessful) {&#13;&#10;                    Log.d(TAG, &quot;createUserWithEmail:success&quot;)&#13;&#10;                    Toast.makeText(this, &quot;Account created successfully!&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;                    startMainActivity()&#13;&#10;                } else {&#13;&#10;                    Log.w(TAG, &quot;createUserWithEmail:failure&quot;, task.exception)&#13;&#10;                    Toast.makeText(this, &quot;Registration failed: ${task.exception?.message}&quot;,&#13;&#10;                        Toast.LENGTH_SHORT).show()&#13;&#10;&#13;&#10;                    // If everything fails, offer to proceed without authentication&#13;&#10;                    showAuthenticationFailedDialog()&#13;&#10;                }&#13;&#10;            }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun showForgotPasswordDialog() {&#13;&#10;        val emailInput = EditText(this)&#13;&#10;        emailInput.hint = &quot;Enter your email&quot;&#13;&#10;&#13;&#10;        MaterialAlertDialogBuilder(this)&#13;&#10;            .setTitle(&quot;Reset Password&quot;)&#13;&#10;            .setMessage(&quot;Enter your email to receive a password reset link&quot;)&#13;&#10;            .setView(emailInput)&#13;&#10;            .setPositiveButton(&quot;Send&quot;) { _, _ -&gt;&#13;&#10;                val email = emailInput.text.toString().trim()&#13;&#10;                if (email.isNotEmpty()) {&#13;&#10;                    resetPassword(email)&#13;&#10;                } else {&#13;&#10;                    Toast.makeText(this, &quot;Email cannot be empty&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;                }&#13;&#10;            }&#13;&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#13;&#10;            .show()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun resetPassword(email: String) {&#13;&#10;        showProgress(true)&#13;&#10;&#13;&#10;        auth.sendPasswordResetEmail(email)&#13;&#10;            .addOnCompleteListener { task -&gt;&#13;&#10;                showProgress(false)&#13;&#10;                if (task.isSuccessful) {&#13;&#10;                    Toast.makeText(this, &quot;Reset link sent to your email&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;                } else {&#13;&#10;                    Toast.makeText(this, &quot;Failed to send reset email: ${task.exception?.message}&quot;,&#13;&#10;                        Toast.LENGTH_SHORT).show()&#13;&#10;                }&#13;&#10;            }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun showAuthenticationFailedDialog() {&#13;&#10;        MaterialAlertDialogBuilder(this)&#13;&#10;            .setTitle(&quot;Authentication Failed&quot;)&#13;&#10;            .setMessage(&quot;Would you like to continue without signing in? Some features may be limited.&quot;)&#13;&#10;            .setPositiveButton(&quot;Continue Without Sign In&quot;) { _, _ -&gt;&#13;&#10;                startMainActivity()&#13;&#10;            }&#13;&#10;            .setNegativeButton(&quot;Try Again&quot;, null)&#13;&#10;            .show()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun showGoogleSignInNotAvailableDialog() {&#13;&#10;        MaterialAlertDialogBuilder(this)&#13;&#10;            .setTitle(&quot;Google Sign-In Not Available&quot;)&#13;&#10;            .setMessage(&quot;Please use email/password authentication or proceed without authentication.&quot;)&#13;&#10;            .setPositiveButton(&quot;Skip Authentication&quot;) { _, _ -&gt;&#13;&#10;                startMainActivity()&#13;&#10;            }&#13;&#10;            .setNegativeButton(&quot;Try Email/Password&quot;, null)&#13;&#10;            .show()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun handleSignInResult(data: Intent?) {&#13;&#10;        try {&#13;&#10;            val task = GoogleSignIn.getSignedInAccountFromIntent(data)&#13;&#10;            val account = task.getResult(ApiException::class.java)&#13;&#10;            if (account != null &amp;&amp; account.idToken != null) {&#13;&#10;                firebaseAuthWithGoogle(account.idToken!!)&#13;&#10;            } else {&#13;&#10;                throw Exception(&quot;Google account or token is null&quot;)&#13;&#10;            }&#13;&#10;        } catch (e: ApiException) {&#13;&#10;            showProgress(false)&#13;&#10;            Log.w(TAG, &quot;Google sign in failed: ${e.statusCode}&quot;, e)&#13;&#10;            Toast.makeText(this, &quot;Google Sign-In failed. Proceeding without authentication.&quot;,&#13;&#10;                Toast.LENGTH_SHORT).show()&#13;&#10;            startMainActivity()&#13;&#10;        } catch (e: Exception) {&#13;&#10;            showProgress(false)&#13;&#10;            Log.e(TAG, &quot;Unexpected error in Google Sign-In: ${e.message}&quot;)&#13;&#10;            startMainActivity()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun firebaseAuthWithGoogle(idToken: String) {&#13;&#10;        val credential = GoogleAuthProvider.getCredential(idToken, null)&#13;&#10;        auth.signInWithCredential(credential)&#13;&#10;            .addOnCompleteListener(this) { task -&gt;&#13;&#10;                showProgress(false)&#13;&#10;                if (task.isSuccessful) {&#13;&#10;                    Log.d(TAG, &quot;signInWithCredential:success&quot;)&#13;&#10;                    startMainActivity()&#13;&#10;                } else {&#13;&#10;                    Log.w(TAG, &quot;signInWithCredential:failure&quot;, task.exception)&#13;&#10;                    Toast.makeText(this, &quot;Google authentication failed: ${task.exception?.message}&quot;,&#13;&#10;                        Toast.LENGTH_SHORT).show()&#13;&#10;&#13;&#10;                    // If Google auth fails, show dialog offering alternatives&#13;&#10;                    showAuthenticationFailedDialog()&#13;&#10;                }&#13;&#10;            }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun showProgress(show: Boolean) {&#13;&#10;        progressBar.visibility = if (show) View.VISIBLE else View.GONE&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun startMainActivity() {&#13;&#10;        val intent = Intent(this, MainActivity::class.java)&#13;&#10;        startActivity(intent)&#13;&#10;        finish()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun showFirebaseUnavailableDialog() {&#13;&#10;        MaterialAlertDialogBuilder(this)&#13;&#10;            .setTitle(&quot;Authentication Unavailable&quot;)&#13;&#10;            .setMessage(&quot;Firebase services are not available. You can still use the app with limited functionality.&quot;)&#13;&#10;            .setPositiveButton(&quot;Continue&quot;) { _, _ -&gt;&#13;&#10;                startMainActivity()&#13;&#10;            }&#13;&#10;            .setNegativeButton(&quot;Exit&quot;) { _, _ -&gt;&#13;&#10;                finish()&#13;&#10;            }&#13;&#10;            .setCancelable(false)&#13;&#10;            .show()&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/adapter/ItemsAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/adapter/ItemsAdapter.kt" />
              <option name="originalContent" value="package com.example.campus_lost_found.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.bumptech.glide.Glide&#10;import com.example.campus_lost_found.R&#10;import com.example.campus_lost_found.model.FoundItem&#10;import com.example.campus_lost_found.model.Item&#10;import com.example.campus_lost_found.model.LostItem&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;class ItemsAdapter(&#10;    private var items: MutableList&lt;Item&gt; = mutableListOf(),&#10;    private val isLostItemsList: Boolean,&#10;    private val currentUserId: String,&#10;    private val onClaimButtonClick: ((Item) -&gt; Unit)? = null,&#10;    private val onItemClick: ((Item) -&gt; Unit)? = null&#10;) : RecyclerView.Adapter&lt;ItemsAdapter.ItemViewHolder&gt;() {&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_card, parent, false)&#10;        return ItemViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {&#10;        val item = items[position]&#10;        holder.bind(item, isLostItemsList, currentUserId, onClaimButtonClick, onItemClick)&#10;    }&#10;&#10;    override fun getItemCount() = items.size&#10;&#10;    // Method to update the items list efficiently&#10;    fun updateItems(newItems: List&lt;Item&gt;) {&#10;        val diffCallback = ItemDiffCallback(items, newItems)&#10;        val diffResult = DiffUtil.calculateDiff(diffCallback)&#10;&#10;        items.clear()&#10;        items.addAll(newItems)&#10;        diffResult.dispatchUpdatesTo(this)&#10;    }&#10;&#10;    // DiffUtil callback for efficient list updates&#10;    private class ItemDiffCallback(&#10;        private val oldList: List&lt;Item&gt;,&#10;        private val newList: List&lt;Item&gt;&#10;    ) : DiffUtil.Callback() {&#10;&#10;        override fun getOldListSize(): Int = oldList.size&#10;&#10;        override fun getNewListSize(): Int = newList.size&#10;&#10;        override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {&#10;            return oldList[oldItemPosition].id == newList[newItemPosition].id&#10;        }&#10;&#10;        override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {&#10;            return oldList[oldItemPosition] == newList[newItemPosition]&#10;        }&#10;    }&#10;&#10;    class ItemViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val itemImage: ImageView = itemView.findViewById(R.id.itemImage)&#10;        private val itemName: TextView = itemView.findViewById(R.id.itemName)&#10;        private val itemDescription: TextView = itemView.findViewById(R.id.itemDescription)&#10;        private val itemCategory: TextView = itemView.findViewById(R.id.itemCategory)&#10;        private val itemLocation: TextView = itemView.findViewById(R.id.itemLocation)&#10;        private val itemDate: TextView = itemView.findViewById(R.id.itemDate)&#10;        private val claimButton: Button = itemView.findViewById(R.id.claimButton)&#10;&#10;        fun bind(&#10;            item: Item,&#10;            isLostItemsList: Boolean,&#10;            currentUserId: String,&#10;            onClaimButtonClick: ((Item) -&gt; Unit)?,&#10;            onItemClick: ((Item) -&gt; Unit)?&#10;        ) {&#10;            itemName.text = item.name&#10;            itemDescription.text = item.description&#10;            itemCategory.text = item.category&#10;&#10;            // Format date&#10;            val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;&#10;            when (item) {&#10;                is LostItem -&gt; {&#10;                    itemLocation.text = itemView.context.getString(R.string.lost_at, item.location)&#10;                    itemDate.text = itemView.context.getString(R.string.lost_on, dateFormat.format(item.date))&#10;                }&#10;                is FoundItem -&gt; {&#10;                    itemLocation.text = itemView.context.getString(R.string.found_at, item.location)&#10;                    itemDate.text = itemView.context.getString(R.string.found_on, dateFormat.format(item.date))&#10;                }&#10;            }&#10;&#10;            // Load image with Glide&#10;            if (!item.imageUrl.isNullOrEmpty()) {&#10;                Glide.with(itemView.context)&#10;                    .load(item.imageUrl)&#10;                    .placeholder(R.drawable.ic_placeholder)&#10;                    .error(R.drawable.ic_error)&#10;                    .into(itemImage)&#10;            } else {&#10;                itemImage.setImageResource(R.drawable.ic_placeholder)&#10;            }&#10;&#10;            // Set up claim button&#10;            if (item.userId == currentUserId) {&#10;                claimButton.visibility = View.GONE&#10;            } else {&#10;                claimButton.visibility = View.VISIBLE&#10;                claimButton.text = if (isLostItemsList) {&#10;                    itemView.context.getString(R.string.i_found_this)&#10;                } else {&#10;                    itemView.context.getString(R.string.this_is_mine)&#10;                }&#10;                claimButton.setOnClickListener {&#10;                    onClaimButtonClick?.invoke(item)&#10;                }&#10;            }&#10;&#10;            // Set up item click&#10;            itemView.setOnClickListener {&#10;                onItemClick?.invoke(item)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.campus_lost_found.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.bumptech.glide.Glide&#10;import com.example.campus_lost_found.R&#10;import com.example.campus_lost_found.model.FoundItem&#10;import com.example.campus_lost_found.model.Item&#10;import com.example.campus_lost_found.model.LostItem&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;class ItemsAdapter(&#10;    private var items: MutableList&lt;Item&gt; = mutableListOf(),&#10;    private val isLostItemsList: Boolean,&#10;    private val currentUserId: String,&#10;    private val onClaimButtonClick: ((Item) -&gt; Unit)? = null,&#10;    private val onItemClick: ((Item) -&gt; Unit)? = null&#10;) : RecyclerView.Adapter&lt;ItemsAdapter.ItemViewHolder&gt;() {&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_card, parent, false)&#10;        return ItemViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {&#10;        val item = items[position]&#10;        holder.bind(item, isLostItemsList, currentUserId, onClaimButtonClick, onItemClick)&#10;    }&#10;&#10;    override fun getItemCount() = items.size&#10;&#10;    // Method to update the items list efficiently&#10;    fun updateItems(newItems: List&lt;Item&gt;) {&#10;        val diffCallback = ItemDiffCallback(items, newItems)&#10;        val diffResult = DiffUtil.calculateDiff(diffCallback)&#10;&#10;        items.clear()&#10;        items.addAll(newItems)&#10;        diffResult.dispatchUpdatesTo(this)&#10;    }&#10;&#10;    // DiffUtil callback for efficient list updates&#10;    private class ItemDiffCallback(&#10;        private val oldList: List&lt;Item&gt;,&#10;        private val newList: List&lt;Item&gt;&#10;    ) : DiffUtil.Callback() {&#10;&#10;        override fun getOldListSize(): Int = oldList.size&#10;&#10;        override fun getNewListSize(): Int = newList.size&#10;&#10;        override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {&#10;            return oldList[oldItemPosition].id == newList[newItemPosition].id&#10;        }&#10;&#10;        override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {&#10;            return oldList[oldItemPosition] == newList[newItemPosition]&#10;        }&#10;    }&#10;&#10;    class ItemViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val itemImage: ImageView = itemView.findViewById(R.id.itemImage)&#10;        private val itemName: TextView = itemView.findViewById(R.id.itemName)&#10;        private val itemDescription: TextView = itemView.findViewById(R.id.itemDescription)&#10;        private val itemCategory: TextView = itemView.findViewById(R.id.itemCategory)&#10;        private val itemLocation: TextView = itemView.findViewById(R.id.itemLocation)&#10;        private val itemDate: TextView = itemView.findViewById(R.id.itemDate)&#10;        private val claimButton: Button = itemView.findViewById(R.id.claimButton)&#10;&#10;        fun bind(&#10;            item: Item,&#10;            isLostItemsList: Boolean,&#10;            currentUserId: String,&#10;            onClaimButtonClick: ((Item) -&gt; Unit)?,&#10;            onItemClick: ((Item) -&gt; Unit)?&#10;        ) {&#10;            itemName.text = item.name&#10;            itemDescription.text = item.description&#10;            itemCategory.text = item.category&#10;&#10;            // Format date&#10;            val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;&#10;            when (item) {&#10;                is LostItem -&gt; {&#10;                    itemLocation.text = itemView.context.getString(R.string.lost_at, item.location)&#10;                    itemDate.text = itemView.context.getString(R.string.lost_on, dateFormat.format(item.dateLost.toDate()))&#10;                }&#10;                is FoundItem -&gt; {&#10;                    itemLocation.text = itemView.context.getString(R.string.found_at, item.location)&#10;                    itemDate.text = itemView.context.getString(R.string.found_on, dateFormat.format(item.dateFound.toDate()))&#10;                }&#10;            }&#10;&#10;            // Load image with Glide&#10;            if (item.imageUrl.isNotEmpty()) {&#10;                Glide.with(itemView.context)&#10;                    .load(item.imageUrl)&#10;                    .placeholder(R.drawable.ic_placeholder)&#10;                    .error(R.drawable.ic_error)&#10;                    .into(itemImage)&#10;            } else {&#10;                itemImage.setImageResource(R.drawable.ic_placeholder)&#10;            }&#10;&#10;            // Set up claim button&#10;            if (item.reportedBy == currentUserId) {&#10;                claimButton.visibility = View.GONE&#10;            } else {&#10;                claimButton.visibility = View.VISIBLE&#10;                claimButton.text = if (isLostItemsList) {&#10;                    itemView.context.getString(R.string.i_found_this)&#10;                } else {&#10;                    itemView.context.getString(R.string.this_is_mine)&#10;                }&#10;                claimButton.setOnClickListener {&#10;                    onClaimButtonClick?.invoke(item)&#10;                }&#10;            }&#10;&#10;            // Set up item click&#10;            itemView.setOnClickListener {&#10;                onItemClick?.invoke(item)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/utils/SearchFilterManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/utils/SearchFilterManager.kt" />
              <option name="originalContent" value="package com.example.campus_lost_found.utils&#10;&#10;import android.app.DatePickerDialog&#10;import android.content.Context&#10;import android.text.Editable&#10;import android.text.TextWatcher&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.widget.ArrayAdapter&#10;import android.widget.EditText&#10;import android.widget.Spinner&#10;import androidx.appcompat.app.AlertDialog&#10;import com.example.campus_lost_found.R&#10;import com.google.android.material.button.MaterialButton&#10;import com.google.android.material.chip.Chip&#10;import com.google.android.material.chip.ChipGroup&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.android.material.textfield.TextInputEditText&#10;import com.google.firebase.Timestamp&#10;import java.text.SimpleDateFormat&#10;import java.util.Calendar&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class SearchFilterManager(&#10;    private val context: Context,&#10;    private val rootView: View,&#10;    private val onSearchFiltersChanged: (&#10;        query: String,&#10;        categories: List&lt;String&gt;,&#10;        startDate: Date?,&#10;        endDate: Date?,&#10;        location: String?&#10;    ) -&gt; Unit&#10;) {&#10;    private val searchEditText: TextInputEditText = rootView.findViewById(R.id.search_edit_text)&#10;    private val categoryChipGroup: ChipGroup = rootView.findViewById(R.id.category_chip_group)&#10;    private val dateFilterButton: MaterialButton = rootView.findViewById(R.id.date_filter_button)&#10;    private val locationFilterButton: MaterialButton = rootView.findViewById(R.id.location_filter_button)&#10;&#10;    private var searchQuery: String = &quot;&quot;&#10;    private val selectedCategories = mutableListOf&lt;String&gt;()&#10;    private var startDate: Date? = null&#10;    private var endDate: Date? = null&#10;    private var selectedLocation: String? = null&#10;&#10;    // Pre-defined campus locations&#10;    private val campusLocations = listOf(&#10;        &quot;Library&quot;, &quot;Student Center&quot;, &quot;Academic Building&quot;, &quot;Cafeteria&quot;, &#10;        &quot;Gymnasium&quot;, &quot;Dormitory&quot;, &quot;Parking Lot&quot;, &quot;Auditorium&quot;, &quot;Labs&quot;&#10;    )&#10;&#10;    init {&#10;        setupSearchListener()&#10;        setupCategoryChips()&#10;        setupDateFilter()&#10;        setupLocationFilter()&#10;    }&#10;&#10;    private fun setupSearchListener() {&#10;        searchEditText.addTextChangedListener(object : TextWatcher {&#10;            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}&#10;            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}&#10;            override fun afterTextChanged(s: Editable?) {&#10;                searchQuery = s?.toString()?.trim() ?: &quot;&quot;&#10;                notifyFiltersChanged()&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun setupCategoryChips() {&#10;        // Set up click listeners for all category chips&#10;        for (i in 0 until categoryChipGroup.childCount) {&#10;            val chip = categoryChipGroup.getChildAt(i) as Chip&#10;            chip.setOnCheckedChangeListener { _, isChecked -&gt;&#10;                val category = chip.text.toString()&#10;                if (isChecked) {&#10;                    if (!selectedCategories.contains(category)) {&#10;                        selectedCategories.add(category)&#10;                    }&#10;                } else {&#10;                    selectedCategories.remove(category)&#10;                }&#10;                notifyFiltersChanged()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupDateFilter() {&#10;        val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;        &#10;        dateFilterButton.setOnClickListener {&#10;            // Create a dialog for date range selection&#10;            val dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_date_range, null)&#10;            val startDateButton = dialogView.findViewById&lt;MaterialButton&gt;(R.id.start_date_button)&#10;            val endDateButton = dialogView.findViewById&lt;MaterialButton&gt;(R.id.end_date_button)&#10;            val clearButton = dialogView.findViewById&lt;MaterialButton&gt;(R.id.clear_date_button)&#10;&#10;            // Initialize with current values&#10;            startDateButton.text = startDate?.let { dateFormat.format(it) } ?: &quot;Select Start Date&quot;&#10;            endDateButton.text = endDate?.let { dateFormat.format(it) } ?: &quot;Select End Date&quot;&#10;&#10;            // Start date button - use MaterialDatePicker for better calendar selection&#10;            startDateButton.setOnClickListener {&#10;                val builder = com.google.android.material.datepicker.MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select Start Date&quot;)&#10;&#10;                // If there's already a start date, select it in the picker&#10;                if (startDate != null) {&#10;                    builder.setSelection(startDate!!.time)&#10;                }&#10;&#10;                val datePicker = builder.build()&#10;&#10;                datePicker.addOnPositiveButtonClickListener { selection -&gt;&#10;                    startDate = Date(selection)&#10;                    startDateButton.text = dateFormat.format(startDate!!)&#10;                }&#10;&#10;                // Show the calendar picker&#10;                datePicker.show((context as androidx.fragment.app.FragmentActivity).supportFragmentManager, &quot;START_DATE_PICKER&quot;)&#10;            }&#10;&#10;            // End date button - use MaterialDatePicker for better calendar selection&#10;            endDateButton.setOnClickListener {&#10;                val builder = com.google.android.material.datepicker.MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select End Date&quot;)&#10;&#10;                // If there's already an end date, select it in the picker&#10;                if (endDate != null) {&#10;                    builder.setSelection(endDate!!.time)&#10;                }&#10;&#10;                val datePicker = builder.build()&#10;&#10;                datePicker.addOnPositiveButtonClickListener { selection -&gt;&#10;                    endDate = Date(selection)&#10;                    endDateButton.text = dateFormat.format(endDate!!)&#10;                }&#10;&#10;                // Show the calendar picker&#10;                datePicker.show((context as androidx.fragment.app.FragmentActivity).supportFragmentManager, &quot;END_DATE_PICKER&quot;)&#10;            }&#10;&#10;            clearButton.setOnClickListener {&#10;                startDate = null&#10;                endDate = null&#10;                startDateButton.text = &quot;Select Start Date&quot;&#10;                endDateButton.text = &quot;Select End Date&quot;&#10;            }&#10;&#10;            // Show dialog&#10;            MaterialAlertDialogBuilder(context)&#10;                .setTitle(&quot;Select Date Range&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Apply&quot;) { _, _ -&gt;&#10;                    updateDateFilterButtonText()&#10;                    notifyFiltersChanged()&#10;                }&#10;                .setNegativeButton(&quot;Cancel&quot;, null)&#10;                .show()&#10;        }&#10;    }&#10;&#10;    private fun setupLocationFilter() {&#10;        locationFilterButton.setOnClickListener {&#10;            val dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_location_filter, null)&#10;            val locationSpinner = dialogView.findViewById&lt;Spinner&gt;(R.id.location_spinner)&#10;            val locationEditText = dialogView.findViewById&lt;EditText&gt;(R.id.location_edit_text)&#10;            &#10;            // Set up the spinner with campus locations&#10;            val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, &#10;                listOf(&quot;Select location...&quot;) + campusLocations + &quot;Other&quot;)&#10;            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;            locationSpinner.adapter = adapter&#10;            &#10;            // Set initial selection based on current filter&#10;            if (selectedLocation != null) {&#10;                val position = campusLocations.indexOf(selectedLocation)&#10;                if (position &gt;= 0) {&#10;                    locationSpinner.setSelection(position + 1) // +1 for the &quot;Select location...&quot; item&#10;                } else {&#10;                    locationSpinner.setSelection(adapter.count - 1) // &quot;Other&quot; option&#10;                    locationEditText.setText(selectedLocation)&#10;                    locationEditText.visibility = View.VISIBLE&#10;                }&#10;            }&#10;            &#10;            // Show/hide the EditText based on the &quot;Other&quot; selection&#10;            locationSpinner.setOnItemSelectedListener(object : android.widget.AdapterView.OnItemSelectedListener {&#10;                override fun onItemSelected(parent: android.widget.AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) {&#10;                    locationEditText.visibility = if (position == adapter.count - 1) View.VISIBLE else View.GONE&#10;                }&#10;                override fun onNothingSelected(parent: android.widget.AdapterView&lt;*&gt;?) {}&#10;            })&#10;&#10;            // Show dialog&#10;            MaterialAlertDialogBuilder(context)&#10;                .setTitle(&quot;Filter by Location&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Apply&quot;) { _, _ -&gt;&#10;                    val position = locationSpinner.selectedItemPosition&#10;                    selectedLocation = when {&#10;                        position == 0 -&gt; null // &quot;Select location...&quot;&#10;                        position &lt; adapter.count - 1 -&gt; adapter.getItem(position).toString() // Campus locations&#10;                        else -&gt; locationEditText.text.toString().takeIf { it.isNotBlank() } // &quot;Other&quot; with custom input&#10;                    }&#10;                    updateLocationFilterButtonText()&#10;                    notifyFiltersChanged()&#10;                }&#10;                .setNegativeButton(&quot;Clear&quot;) { _, _ -&gt;&#10;                    selectedLocation = null&#10;                    updateLocationFilterButtonText()&#10;                    notifyFiltersChanged()&#10;                }&#10;        }&#10;    }&#10;&#10;    private fun updateDateFilterButtonText() {&#10;        val dateFormat = SimpleDateFormat(&quot;MM/dd&quot;, Locale.getDefault())&#10;        val dateFormat = SimpleDateFormat(&quot;MM/dd&quot;, Locale.getDefault())&#10;                &quot;${dateFormat.format(startDate!!)} - ${dateFormat.format(endDate!!)}&quot;&#10;            startDate != null -&gt; &#10;                &quot;From ${dateFormat.format(startDate!!)}&quot;&#10;            endDate != null -&gt; &#10;                &quot;Until ${dateFormat.format(endDate!!)}&quot;&#10;            else -&gt; &#10;                &quot;Date Range&quot;&#10;        }&#10;    }&#10;                &quot;Date Range&quot;&#10;    private fun updateLocationFilterButtonText() {&#10;        locationFilterButton.text = selectedLocation ?: &quot;Location&quot;&#10;    }&#10;&#10;    private fun notifyFiltersChanged() {&#10;        onSearchFiltersChanged(searchQuery, selectedCategories, startDate, endDate, selectedLocation)&#10;    }&#10;&#10;    // Utility method to convert Date to Firestore Timestamp&#10;    fun getStartTimestamp(): Timestamp? = startDate?.let { Timestamp(it) }&#10;    fun getEndTimestamp(): Timestamp? = endDate?.let { Timestamp(it) }&#10;}&#10;    // Utility method to convert Date to Firestore Timestamp&#10;    fun getStartTimestamp(): Timestamp? = startDate?.let { Timestamp(it) }&#10;    fun getEndTimestamp(): Timestamp? = endDate?.let { Timestamp(it) }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.campus_lost_found.utils&#10;&#10;import android.app.DatePickerDialog&#10;import android.content.Context&#10;import android.text.Editable&#10;import android.text.TextWatcher&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.widget.ArrayAdapter&#10;import android.widget.EditText&#10;import android.widget.Spinner&#10;import androidx.appcompat.app.AlertDialog&#10;import com.example.campus_lost_found.R&#10;import com.google.android.material.button.MaterialButton&#10;import com.google.android.material.chip.Chip&#10;import com.google.android.material.chip.ChipGroup&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.android.material.textfield.TextInputEditText&#10;import com.google.firebase.Timestamp&#10;import java.text.SimpleDateFormat&#10;import java.util.Calendar&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class SearchFilterManager(&#10;    private val context: Context,&#10;    private val rootView: View,&#10;    private val onSearchFiltersChanged: (&#10;        query: String,&#10;        categories: List&lt;String&gt;,&#10;        startDate: Date?,&#10;        endDate: Date?,&#10;        location: String?&#10;    ) -&gt; Unit&#10;) {&#10;    private val searchEditText: TextInputEditText = rootView.findViewById(R.id.search_edit_text)&#10;    private val categoryChipGroup: ChipGroup = rootView.findViewById(R.id.category_chip_group)&#10;    private val dateFilterButton: MaterialButton = rootView.findViewById(R.id.date_filter_button)&#10;    private val locationFilterButton: MaterialButton = rootView.findViewById(R.id.location_filter_button)&#10;&#10;    private var searchQuery: String = &quot;&quot;&#10;    private val selectedCategories = mutableListOf&lt;String&gt;()&#10;    private var startDate: Date? = null&#10;    private var endDate: Date? = null&#10;    private var selectedLocation: String? = null&#10;&#10;    // Pre-defined campus locations&#10;    private val campusLocations = listOf(&#10;        &quot;Library&quot;, &quot;Student Center&quot;, &quot;Academic Building&quot;, &quot;Cafeteria&quot;, &#10;        &quot;Gymnasium&quot;, &quot;Dormitory&quot;, &quot;Parking Lot&quot;, &quot;Auditorium&quot;, &quot;Labs&quot;&#10;    )&#10;&#10;    init {&#10;        setupSearchListener()&#10;        setupCategoryChips()&#10;        setupDateFilter()&#10;        setupLocationFilter()&#10;    }&#10;&#10;    private fun setupSearchListener() {&#10;        searchEditText.addTextChangedListener(object : TextWatcher {&#10;            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}&#10;            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}&#10;            override fun afterTextChanged(s: Editable?) {&#10;                searchQuery = s?.toString()?.trim() ?: &quot;&quot;&#10;                notifyFiltersChanged()&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun setupCategoryChips() {&#10;        // Set up click listeners for all category chips&#10;        for (i in 0 until categoryChipGroup.childCount) {&#10;            val chip = categoryChipGroup.getChildAt(i) as Chip&#10;            chip.setOnCheckedChangeListener { _, isChecked -&gt;&#10;                val category = chip.text.toString()&#10;                if (isChecked) {&#10;                    if (!selectedCategories.contains(category)) {&#10;                        selectedCategories.add(category)&#10;                    }&#10;                } else {&#10;                    selectedCategories.remove(category)&#10;                }&#10;                notifyFiltersChanged()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupDateFilter() {&#10;        val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;        &#10;        dateFilterButton.setOnClickListener {&#10;            // Create a dialog for date range selection&#10;            val dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_date_range, null)&#10;            val startDateButton = dialogView.findViewById&lt;MaterialButton&gt;(R.id.start_date_button)&#10;            val endDateButton = dialogView.findViewById&lt;MaterialButton&gt;(R.id.end_date_button)&#10;            val clearButton = dialogView.findViewById&lt;MaterialButton&gt;(R.id.clear_date_button)&#10;&#10;            // Initialize with current values&#10;            startDateButton.text = startDate?.let { dateFormat.format(it) } ?: &quot;Select Start Date&quot;&#10;            endDateButton.text = endDate?.let { dateFormat.format(it) } ?: &quot;Select End Date&quot;&#10;&#10;            // Start date button - use MaterialDatePicker for better calendar selection&#10;            startDateButton.setOnClickListener {&#10;                val builder = com.google.android.material.datepicker.MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select Start Date&quot;)&#10;&#10;                // If there's already a start date, select it in the picker&#10;                if (startDate != null) {&#10;                    builder.setSelection(startDate!!.time)&#10;                }&#10;&#10;                val datePicker = builder.build()&#10;&#10;                datePicker.addOnPositiveButtonClickListener { selection -&gt;&#10;                    startDate = Date(selection)&#10;                    startDateButton.text = dateFormat.format(startDate!!)&#10;                }&#10;&#10;                // Show the calendar picker&#10;                datePicker.show((context as androidx.fragment.app.FragmentActivity).supportFragmentManager, &quot;START_DATE_PICKER&quot;)&#10;            }&#10;&#10;            // End date button - use MaterialDatePicker for better calendar selection&#10;            endDateButton.setOnClickListener {&#10;                val builder = com.google.android.material.datepicker.MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select End Date&quot;)&#10;&#10;                // If there's already an end date, select it in the picker&#10;                if (endDate != null) {&#10;                    builder.setSelection(endDate!!.time)&#10;                }&#10;&#10;                val datePicker = builder.build()&#10;&#10;                datePicker.addOnPositiveButtonClickListener { selection -&gt;&#10;                    endDate = Date(selection)&#10;                    endDateButton.text = dateFormat.format(endDate!!)&#10;                }&#10;&#10;                // Show the calendar picker&#10;                datePicker.show((context as androidx.fragment.app.FragmentActivity).supportFragmentManager, &quot;END_DATE_PICKER&quot;)&#10;            }&#10;&#10;            clearButton.setOnClickListener {&#10;                startDate = null&#10;                endDate = null&#10;                startDateButton.text = &quot;Select Start Date&quot;&#10;                endDateButton.text = &quot;Select End Date&quot;&#10;            }&#10;&#10;            // Show dialog&#10;            MaterialAlertDialogBuilder(context)&#10;                .setTitle(&quot;Select Date Range&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Apply&quot;) { _, _ -&gt;&#10;                    updateDateFilterButtonText()&#10;                    notifyFiltersChanged()&#10;                }&#10;                .setNegativeButton(&quot;Cancel&quot;, null)&#10;                .show()&#10;        }&#10;    }&#10;&#10;    private fun setupLocationFilter() {&#10;        locationFilterButton.setOnClickListener {&#10;            val dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_location_filter, null)&#10;            val locationSpinner = dialogView.findViewById&lt;Spinner&gt;(R.id.location_spinner)&#10;            val locationEditText = dialogView.findViewById&lt;EditText&gt;(R.id.location_edit_text)&#10;            &#10;            // Set up the spinner with campus locations&#10;            val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, &#10;                listOf(&quot;Select location...&quot;) + campusLocations + &quot;Other&quot;)&#10;            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;            locationSpinner.adapter = adapter&#10;            &#10;            // Set initial selection based on current filter&#10;            if (selectedLocation != null) {&#10;                val position = campusLocations.indexOf(selectedLocation)&#10;                if (position &gt;= 0) {&#10;                    locationSpinner.setSelection(position + 1) // +1 for the &quot;Select location...&quot; item&#10;                } else {&#10;                    locationSpinner.setSelection(adapter.count - 1) // &quot;Other&quot; option&#10;                    locationEditText.setText(selectedLocation)&#10;                    locationEditText.visibility = View.VISIBLE&#10;                }&#10;            }&#10;            &#10;            // Show/hide the EditText based on the &quot;Other&quot; selection&#10;            locationSpinner.setOnItemSelectedListener(object : android.widget.AdapterView.OnItemSelectedListener {&#10;                override fun onItemSelected(parent: android.widget.AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) {&#10;                    locationEditText.visibility = if (position == adapter.count - 1) View.VISIBLE else View.GONE&#10;                }&#10;                override fun onNothingSelected(parent: android.widget.AdapterView&lt;*&gt;?) {}&#10;            })&#10;&#10;            // Show dialog&#10;            MaterialAlertDialogBuilder(context)&#10;                .setTitle(&quot;Filter by Location&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Apply&quot;) { _, _ -&gt;&#10;                    val position = locationSpinner.selectedItemPosition&#10;                    selectedLocation = when {&#10;                        position == 0 -&gt; null // &quot;Select location...&quot;&#10;                        position &lt; adapter.count - 1 -&gt; adapter.getItem(position).toString() // Campus locations&#10;                        else -&gt; locationEditText.text.toString().takeIf { it.isNotBlank() } // &quot;Other&quot; with custom input&#10;                    }&#10;                    updateLocationFilterButtonText()&#10;                    notifyFiltersChanged()&#10;                }&#10;                .setNegativeButton(&quot;Clear&quot;) { _, _ -&gt;&#10;                    selectedLocation = null&#10;                    updateLocationFilterButtonText()&#10;                    notifyFiltersChanged()&#10;                }&#10;                .setNeutralButton(&quot;Cancel&quot;, null)&#10;                .show()&#10;        }&#10;    }&#10;&#10;    private fun updateDateFilterButtonText() {&#10;        val dateFormat = SimpleDateFormat(&quot;MMM dd&quot;, Locale.getDefault())&#10;        &#10;        dateFilterButton.text = when {&#10;            startDate != null &amp;&amp; endDate != null -&gt; &#10;                &quot;${dateFormat.format(startDate!!)} - ${dateFormat.format(endDate!!)}&quot;&#10;            startDate != null -&gt; &#10;                &quot;From ${dateFormat.format(startDate!!)}&quot;&#10;            endDate != null -&gt; &#10;                &quot;Until ${dateFormat.format(endDate!!)}&quot;&#10;            else -&gt; &#10;                &quot;Date Filter&quot;&#10;        }&#10;    }&#10;&#10;    private fun updateLocationFilterButtonText() {&#10;        locationFilterButton.text = selectedLocation ?: &quot;Location&quot;&#10;    }&#10;&#10;    private fun notifyFiltersChanged() {&#10;        onSearchFiltersChanged(searchQuery, selectedCategories, startDate, endDate, selectedLocation)&#10;    }&#10;&#10;    // Helper methods for converting between Date and Timestamp&#10;    fun getStartTimestamp(): Timestamp? {&#10;        return startDate?.let { Timestamp(it) }&#10;    }&#10;&#10;    fun getEndTimestamp(): Timestamp? {&#10;        // If end date is specified, add 23:59:59 to include the whole day&#10;        return endDate?.let {&#10;            val calendar = Calendar.getInstance()&#10;            calendar.time = it&#10;            calendar.set(Calendar.HOUR_OF_DAY, 23)&#10;            calendar.set(Calendar.MINUTE, 59)&#10;            calendar.set(Calendar.SECOND, 59)&#10;            Timestamp(calendar.time)&#10;        }&#10;    }&#10;&#10;    fun clearAllFilters() {&#10;        searchEditText.setText(&quot;&quot;)&#10;        searchQuery = &quot;&quot;&#10;        &#10;        // Clear category selections&#10;        for (i in 0 until categoryChipGroup.childCount) {&#10;            val chip = categoryChipGroup.getChildAt(i) as Chip&#10;            chip.isChecked = false&#10;        }&#10;        selectedCategories.clear()&#10;        &#10;        // Clear date filter&#10;        startDate = null&#10;        endDate = null&#10;        dateFilterButton.text = &quot;Date Filter&quot;&#10;        &#10;        // Clear location filter&#10;        selectedLocation = null&#10;        locationFilterButton.text = &quot;Location&quot;&#10;        &#10;        // Notify that filters changed&#10;        notifyFiltersChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/category_chip_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/category_chip_background.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;?attr/colorSecondaryContainer&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;?attr/colorSecondaryContainer&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;?attr/colorOutline&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_add.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_add.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_admin.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_admin.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C13.1,2 14,2.9 14,4C14,5.1 13.1,6 12,6C10.9,6 10,5.1 10,4C10,2.9 10.9,2 12,2ZM21,9V7L15,7V9C15,10.66 16.34,12 18,12C19.66,12 21,10.66 21,9ZM1,9C1,10.66 2.34,12 4,12C5.66,12 7,10.66 7,9V7H1V9ZM13,14H11C8.79,14 7,15.79 7,18V22H17V18C17,15.79 15.21,14 13,14Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_calendar.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_calendar.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;16dp&quot;&#10;    android:height=&quot;16dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurfaceVariant&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M19,3h-1L18,1h-2v2L8,3L8,1L6,1v2L5,3c-1.11,0 -1.99,0.9 -1.99,2L3,19c0,1.1 0.89,2 2,2h14c1.1,0 2,-0.9 2,-2L21,5c0,-1.1 -0.9,-2 -2,-2zM19,19L5,19L5,8h14v11zM7,10h5v5L7,15z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_dark_mode.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_dark_mode.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorControlNormal&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,3c-4.97,0 -9,4.03 -9,9s4.03,9 9,9s9,-4.03 9,-9c0,-0.46 -0.04,-0.92 -0.1,-1.36c-0.98,1.37 -2.58,2.26 -4.4,2.26c-2.98,0 -5.4,-2.42 -5.4,-5.4c0,-1.81 0.89,-3.42 2.26,-4.4C12.92,3.04 12.46,3 12,3L12,3z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_error.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_error.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorError&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM13,17h-2v-2h2v2zM13,13h-2L11,7h2v6z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_found.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_found.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M9,11H7v6h2v-6zM13,5h-2v12h2V5zM17,3h-2v16h2V3z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_light_mode.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_light_mode.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorControlNormal&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,7c-2.76,0 -5,2.24 -5,5s2.24,5 5,5s5,-2.24 5,-5S14.76,7 12,7zM2,13l2,0c0.55,0 1,-0.45 1,-1s-0.45,-1 -1,-1H2c-0.55,0 -1,0.45 -1,1S1.45,13 2,13zM20,13l2,0c0.55,0 1,-0.45 1,-1s-0.45,-1 -1,-1h-2c-0.55,0 -1,0.45 -1,1S19.45,13 20,13zM11,2v2c0,0.55 0.45,1 1,1s1,-0.45 1,-1V2c0,-0.55 -0.45,-1 -1,-1S11,1.45 11,2zM11,20v2c0,0.55 0.45,1 1,1s1,-0.45 1,-1v-2c0,-0.55 -0.45,-1 -1,-1S11,19.45 11,20zM5.99,4.58c-0.39,-0.39 -1.03,-0.39 -1.41,0c-0.39,0.39 -0.39,1.03 0,1.41l1.06,1.06c0.39,0.39 1.03,0.39 1.41,0s0.39,-1.03 0,-1.41L5.99,4.58zM18.36,16.95c-0.39,-0.39 -1.03,-0.39 -1.41,0c-0.39,0.39 -0.39,1.03 0,1.41l1.06,1.06c0.39,0.39 1.03,0.39 1.41,0c0.39,-0.39 0.39,-1.03 0,-1.41L18.36,16.95zM19.42,5.99c0.39,-0.39 0.39,-1.03 0,-1.41c-0.39,-0.39 -1.03,-0.39 -1.41,0l-1.06,1.06c-0.39,0.39 -0.39,1.03 0,1.41s1.03,0.39 1.41,0L19.42,5.99zM7.05,18.36c0.39,-0.39 0.39,-1.03 0,-1.41c-0.39,-0.39 -1.03,-0.39 -1.41,0l-1.06,1.06c-0.39,0.39 -0.39,1.03 0,1.41s1.03,0.39 1.41,0L7.05,18.36z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_location.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_location.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;16dp&quot;&#10;    android:height=&quot;16dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurfaceVariant&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C8.13,2 5,5.13 5,9c0,5.25 7,13 7,13s7,-7.75 7,-13c0,-3.87 -3.13,-7 -7,-7zM12,11.5c-1.38,0 -2.5,-1.12 -2.5,-2.5s1.12,-2.5 2.5,-2.5 2.5,1.12 2.5,2.5 -1.12,2.5 -2.5,2.5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_logout.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_logout.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M17,7l-1.41,1.41L18.17,11H8v2h10.17l-2.58,2.59L17,17l5,-5zM4,5h8V3H4c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h8v-2H4V5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_placeholder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_placeholder.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurfaceVariant&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M21,19V5c0,-1.1 -0.9,-2 -2,-2H5c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2zM8.5,13.5l2.5,3.01L14.5,12l4.5,6H5l3.5,-4.5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorControlNormal&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M17.65,6.35C16.2,4.9 14.21,4 12,4c-4.42,0 -7.99,3.58 -7.99,8s3.57,8 7.99,8c3.73,0 6.84,-2.55 7.73,-6h-2.08c-0.82,2.33 -3.04,4 -5.65,4 -3.31,0 -6,-2.69 -6,-6s2.69,-6 6,-6c1.66,0 3.14,0.69 4.22,1.78L13,11h7V4l-2.35,2.35z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_reports.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_reports.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_search.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_search.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M15.5,14h-0.79l-0.28,-0.27C15.41,12.59 16,11.11 16,9.5 16,5.91 13.09,3 9.5,3S3,5.91 3,9.5 5.91,16 9.5,16c1.61,0 3.09,-0.59 4.23,-1.57l0.27,0.28v0.79l5,4.99L20.49,19l-4.99,-5zM9.5,14C7.01,14 5,11.99 5,9.5S7.01,5 9.5,5 14,7.01 14,9.5 11.99,14 9.5,14z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_admin_dashboard.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_admin_dashboard.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;?attr/colorSurface&quot;&#10;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;            android:id=&quot;@+id/admin_toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot;&#10;            android:background=&quot;?attr/colorPrimaryContainer&quot;&#10;            android:elevation=&quot;4dp&quot;&#10;            app:title=&quot;Admin Dashboard&quot;&#10;            app:titleTextColor=&quot;?attr/colorOnPrimaryContainer&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.tabs.TabLayout&#10;            android:id=&quot;@+id/admin_tab_layout&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:background=&quot;?attr/colorPrimaryContainer&quot;&#10;            app:tabTextColor=&quot;?attr/colorOnPrimaryContainer&quot;&#10;            app:tabIndicatorColor=&quot;?attr/colorPrimary&quot;&#10;            app:tabSelectedTextColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- Statistics Card --&gt;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/stats_card&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Dashboard Statistics&quot;&#10;                        android:textAppearance=&quot;?attr/textAppearanceHeadline6&quot;&#10;                        android:textColor=&quot;?attr/colorOnSurface&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/total_lost_items&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Lost Items&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/total_found_items&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Found Items&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/total_claims&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Total Claims&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/pending_claims&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorSecondary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Pending Claims&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- RecyclerView for Items --&gt;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#10;                android:id=&quot;@+id/admin_recycler_view&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                tools:listitem=&quot;@layout/item_admin_report&quot;&#10;                tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;!-- Empty View --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/admin_empty_view&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:padding=&quot;32dp&quot;&#10;                android:text=&quot;No items found&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceBody1&quot;&#10;                android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;                android:visibility=&quot;visible&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&#10;    &lt;!-- Refresh FAB --&gt;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/admin_refresh_fab&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:contentDescription=&quot;Refresh data&quot;&#10;        app:srcCompat=&quot;@drawable/ic_refresh&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;?attr/colorSurface&quot;&#10;    android:fitsSystemWindows=&quot;true&quot;&#10;    tools:context=&quot;.AdminDashboardActivity&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:fitsSystemWindows=&quot;true&quot;&gt;&#10;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/admin_toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot;&#10;            android:background=&quot;?attr/colorPrimaryContainer&quot;&#10;            android:elevation=&quot;4dp&quot;&#10;            app:title=&quot;Admin Dashboard&quot;&#10;            app:titleTextColor=&quot;?attr/colorOnPrimaryContainer&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.tabs.TabLayout&#10;            android:id=&quot;@+id/admin_tab_layout&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:background=&quot;?attr/colorPrimaryContainer&quot;&#10;            app:tabTextColor=&quot;?attr/colorOnPrimaryContainer&quot;&#10;            app:tabIndicatorColor=&quot;?attr/colorPrimary&quot;&#10;            app:tabSelectedTextColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- Statistics Card --&gt;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/stats_card&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Dashboard Statistics&quot;&#10;                        android:textAppearance=&quot;?attr/textAppearanceHeadline6&quot;&#10;                        android:textColor=&quot;?attr/colorOnSurface&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/total_lost_items&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Lost Items&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/total_found_items&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Found Items&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/total_claims&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Total Claims&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/pending_claims&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorSecondary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Pending Claims&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- RecyclerView for Items --&gt;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#10;                android:id=&quot;@+id/admin_recycler_view&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                tools:listitem=&quot;@layout/item_admin_report&quot;&#10;                tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;!-- Empty View --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/admin_empty_view&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:padding=&quot;32dp&quot;&#10;                android:text=&quot;No items found&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceBody1&quot;&#10;                android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;                android:visibility=&quot;visible&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&#10;    &lt;!-- Refresh FAB --&gt;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/admin_refresh_fab&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:contentDescription=&quot;Refresh data&quot;&#10;        app:srcCompat=&quot;@drawable/ic_refresh&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_claim_item.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_claim_item.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Please provide your contact information so the finder can reach you to arrange pickup.&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Contact information (phone, email, etc.)&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/contactInfoEditText&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:inputType=&quot;textMultiLine&quot;&#10;            android:minLines=&quot;2&quot;&#10;            android:maxLines=&quot;4&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;The person who found this item will be notified of your claim request.&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;        android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_date_range.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_date_range.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;com.google.android.material.button.MaterialButton&#10;        android:id=&quot;@+id/start_date_button&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&#10;        android:text=&quot;Select Start Date&quot;&#10;        app:icon=&quot;@android:drawable/ic_menu_my_calendar&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.button.MaterialButton&#10;        android:id=&quot;@+id/end_date_button&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:text=&quot;Select End Date&quot;&#10;        app:icon=&quot;@android:drawable/ic_menu_my_calendar&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.button.MaterialButton&#10;        android:id=&quot;@+id/clear_date_button&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.Button.TextButton&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;end&quot;&#10;        android:text=&quot;Clear&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_admin_report.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_admin_report.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/admin_item_image&quot;&#10;                android:layout_width=&quot;72dp&quot;&#10;                android:layout_height=&quot;72dp&quot;&#10;                android:scaleType=&quot;centerCrop&quot;&#10;                android:layout_marginEnd=&quot;16dp&quot;&#10;                tools:src=&quot;@drawable/ic_dark_mode&quot;&#10;                android:contentDescription=&quot;Item image&quot;/&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/admin_item_name&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textAppearance=&quot;?attr/textAppearanceHeadline6&quot;&#10;                    android:textColor=&quot;?attr/colorOnSurface&quot;&#10;                    tools:text=&quot;Blue Backpack&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/admin_item_category&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textAppearance=&quot;?attr/textAppearanceBody2&quot;&#10;                    android:textColor=&quot;?attr/colorPrimary&quot;&#10;                    tools:text=&quot;Category: Bags&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/admin_item_date&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textAppearance=&quot;?attr/textAppearanceBody2&quot;&#10;                    android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;                    tools:text=&quot;Date: August 8, 2023&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/admin_item_location&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textAppearance=&quot;?attr/textAppearanceBody2&quot;&#10;                    android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;                    tools:text=&quot;Location: Library&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/admin_item_status&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_gravity=&quot;top&quot;&#10;                app:chipBackgroundColor=&quot;?attr/colorSecondaryContainer&quot;&#10;                android:textColor=&quot;?attr/colorOnSecondaryContainer&quot;&#10;                tools:text=&quot;Pending&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/admin_item_description&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:textAppearance=&quot;?attr/textAppearanceBody2&quot;&#10;            android:textColor=&quot;?attr/colorOnSurface&quot;&#10;            tools:text=&quot;Blue backpack with a laptop and some books inside. Found near the cafeteria.&quot;/&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/admin_claim_section&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            tools:visibility=&quot;visible&quot;&gt;&#10;&#10;            &lt;View&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;1dp&quot;&#10;                android:background=&quot;?attr/colorOutline&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Claim Details&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceSubtitle1&quot;&#10;                android:textColor=&quot;?attr/colorOnSurface&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/admin_claim_by&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceBody2&quot;&#10;                tools:text=&quot;Claimed by: John Doe&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/admin_claim_message&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceBody2&quot;&#10;                android:textStyle=&quot;italic&quot;&#10;                tools:text=&quot;Message: This is my backpack that I lost yesterday. I can describe the contents.&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;end&quot;&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/admin_btn_details&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.TextButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Details&quot;/&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/admin_btn_approve&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.TextButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Approve&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                tools:visibility=&quot;visible&quot;/&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/admin_btn_reject&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.TextButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Reject&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                tools:visibility=&quot;visible&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_card.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_card.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&#10;    app:strokeWidth=&quot;1dp&quot;&#10;    app:strokeColor=&quot;?attr/colorOutline&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/itemImage&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;200dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&#10;            android:background=&quot;?attr/colorSurfaceVariant&quot;&#10;            android:contentDescription=&quot;@string/item_image_description&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:src=&quot;@drawable/ic_placeholder&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/itemName&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;4dp&quot;&#10;            android:textAppearance=&quot;?attr/textAppearanceHeadlineSmall&quot;&#10;            android:textColor=&quot;?attr/colorOnSurface&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            tools:text=&quot;Lost iPhone&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/itemDescription&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&#10;            android:maxLines=&quot;3&quot;&#10;            android:ellipsize=&quot;end&quot;&#10;            android:textAppearance=&quot;?attr/textAppearanceBodyMedium&quot;&#10;            android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;            tools:text=&quot;Black iPhone 13 with cracked screen protector. Lost near the library entrance.&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/itemCategory&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:background=&quot;@drawable/category_chip_background&quot;&#10;                android:padding=&quot;6dp&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceLabelSmall&quot;&#10;                android:textColor=&quot;?attr/colorOnSecondaryContainer&quot;&#10;                android:gravity=&quot;center&quot;&#10;                tools:text=&quot;Electronics&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/itemLocation&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;4dp&quot;&#10;            android:drawablePadding=&quot;8dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:textAppearance=&quot;?attr/textAppearanceBodySmall&quot;&#10;            android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;            app:drawableStartCompat=&quot;@drawable/ic_location&quot;&#10;            tools:text=&quot;Lost at: Main Library&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/itemDate&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&#10;            android:drawablePadding=&quot;8dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:textAppearance=&quot;?attr/textAppearanceBodySmall&quot;&#10;            android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;            app:drawableStartCompat=&quot;@drawable/ic_calendar&quot;&#10;            tools:text=&quot;Lost on: Dec 15, 2024&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/claimButton&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/claim_item&quot;&#10;            app:backgroundTint=&quot;?attr/colorPrimary&quot;&#10;            app:cornerRadius=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/layout_search_filter.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/layout_search_filter.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        android:id=&quot;@+id/search_input_layout&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&#10;        android:hint=&quot;Search items&quot;&#10;        app:endIconMode=&quot;clear_text&quot;&#10;        app:startIconDrawable=&quot;@android:drawable/ic_menu_search&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/search_edit_text&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:imeOptions=&quot;actionSearch&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;HorizontalScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:scrollbars=&quot;none&quot;&gt;&#10;&#10;        &lt;com.google.android.material.chip.ChipGroup&#10;            android:id=&quot;@+id/category_chip_group&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:singleSelection=&quot;false&quot;&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_electronics&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Electronics&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_books&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Books &amp;amp; Stationery&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_id_cards&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;ID Cards &amp;amp; Documents&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_keys&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Keys&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_clothing&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Clothing&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_accessories&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Accessories&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_wallet&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Wallet/Purse&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_other&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Other&quot; /&gt;&#10;        &lt;/com.google.android.material.chip.ChipGroup&gt;&#10;    &lt;/HorizontalScrollView&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/date_filter_button&quot;&#10;            style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginEnd=&quot;4dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Date Range&quot;&#10;            app:icon=&quot;@android:drawable/ic_menu_today&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/location_filter_button&quot;&#10;            style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;4dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Location&quot;&#10;            app:icon=&quot;@android:drawable/ic_menu_mylocation&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>